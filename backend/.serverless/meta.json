{
  "C:\\Users\\julia\\OneDrive\\Dokument\\JSD-23\\meetup-app\\backend": {
    "versionSfCore": null,
    "versionFramework": "4.4.7",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {
      "default-aws-credential-resolver": "<REDACTED>",
      "env": {
        "instance": {
          "credentials": "<REDACTED>",
          "serviceConfigFile": {
            "service": "meetup-backend",
            "provider": {
              "name": "aws",
              "runtime": "nodejs18.x",
              "region": "eu-north-1",
              "stage": "dev",
              "environment": {
                "JWT_SECRET": "<REDACTED>",
                "USERS_TABLE": "Users",
                "MEETUPS_TABLE": "Meetups"
              },
              "deploymentBucket": "meetup-app-dev-project",
              "versionFunctions": true,
              "deploymentBucketObject": {
                "name": "meetup-app-dev-project"
              },
              "compiledCloudFormationTemplate": {
                "AWSTemplateFormatVersion": "2010-09-09",
                "Description": "The AWS CloudFormation template for this Serverless application",
                "Resources": {
                  "GetAllMeetupsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/meetup-backend-dev-getAllMeetups"
                    }
                  },
                  "GetMeetupByIdLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/meetup-backend-dev-getMeetupById"
                    }
                  },
                  "CreateMeetupLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/meetup-backend-dev-createMeetup"
                    }
                  },
                  "AttendMeetupLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/meetup-backend-dev-attendMeetup"
                    }
                  },
                  "CancelAttendanceLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/meetup-backend-dev-cancelAttendance"
                    }
                  },
                  "GetUserMeetupsLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/meetup-backend-dev-getUserMeetups"
                    }
                  },
                  "RegisterLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/meetup-backend-dev-register"
                    }
                  },
                  "LoginLogGroup": {
                    "Type": "AWS::Logs::LogGroup",
                    "Properties": {
                      "LogGroupName": "/aws/lambda/meetup-backend-dev-login"
                    }
                  },
                  "IamRoleLambdaExecution": {
                    "Type": "AWS::IAM::Role",
                    "Properties": {
                      "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Principal": {
                              "Service": [
                                "lambda.amazonaws.com"
                              ]
                            },
                            "Action": [
                              "sts:AssumeRole"
                            ]
                          }
                        ]
                      },
                      "Policies": [
                        {
                          "PolicyName": {
                            "Fn::Join": [
                              "-",
                              [
                                "meetup-backend",
                                "dev",
                                "lambda"
                              ]
                            ]
                          },
                          "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:CreateLogStream",
                                  "logs:CreateLogGroup",
                                  "logs:TagResource"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/meetup-backend-dev*:*"
                                  }
                                ]
                              },
                              {
                                "Effect": "Allow",
                                "Action": [
                                  "logs:PutLogEvents"
                                ],
                                "Resource": [
                                  {
                                    "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/meetup-backend-dev*:*:*"
                                  }
                                ]
                              }
                            ]
                          }
                        }
                      ],
                      "Path": "/",
                      "RoleName": {
                        "Fn::Join": [
                          "-",
                          [
                            "meetup-backend",
                            "dev",
                            {
                              "Ref": "AWS::Region"
                            },
                            "lambdaRole"
                          ]
                        ]
                      }
                    }
                  },
                  "GetAllMeetupsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "meetup-app-dev-project",
                        "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                      },
                      "Handler": "handler.getAllMeetups",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "meetup-backend-dev-getAllMeetups",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "JWT_SECRET": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEETUPS_TABLE": "Meetups"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetAllMeetupsLogGroup"
                    ]
                  },
                  "GetMeetupByIdLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "meetup-app-dev-project",
                        "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                      },
                      "Handler": "handler.getMeetupById",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "meetup-backend-dev-getMeetupById",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "JWT_SECRET": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEETUPS_TABLE": "Meetups"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetMeetupByIdLogGroup"
                    ]
                  },
                  "CreateMeetupLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "meetup-app-dev-project",
                        "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                      },
                      "Handler": "handler.createMeetup",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "meetup-backend-dev-createMeetup",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "JWT_SECRET": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEETUPS_TABLE": "Meetups"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CreateMeetupLogGroup"
                    ]
                  },
                  "AttendMeetupLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "meetup-app-dev-project",
                        "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                      },
                      "Handler": "handler.attendMeetup",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "meetup-backend-dev-attendMeetup",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "JWT_SECRET": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEETUPS_TABLE": "Meetups"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "AttendMeetupLogGroup"
                    ]
                  },
                  "CancelAttendanceLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "meetup-app-dev-project",
                        "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                      },
                      "Handler": "handler.cancelAttendance",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "meetup-backend-dev-cancelAttendance",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "JWT_SECRET": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEETUPS_TABLE": "Meetups"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "CancelAttendanceLogGroup"
                    ]
                  },
                  "GetUserMeetupsLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "meetup-app-dev-project",
                        "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                      },
                      "Handler": "handler.getUserMeetups",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "meetup-backend-dev-getUserMeetups",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "JWT_SECRET": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEETUPS_TABLE": "Meetups"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "GetUserMeetupsLogGroup"
                    ]
                  },
                  "RegisterLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "meetup-app-dev-project",
                        "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                      },
                      "Handler": "authController.register",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "meetup-backend-dev-register",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "JWT_SECRET": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEETUPS_TABLE": "Meetups"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "RegisterLogGroup"
                    ]
                  },
                  "LoginLambdaFunction": {
                    "Type": "AWS::Lambda::Function",
                    "Properties": {
                      "Code": {
                        "S3Bucket": "meetup-app-dev-project",
                        "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                      },
                      "Handler": "authController.login",
                      "Runtime": "nodejs18.x",
                      "FunctionName": "meetup-backend-dev-login",
                      "MemorySize": 1024,
                      "Timeout": 6,
                      "Environment": {
                        "Variables": {
                          "JWT_SECRET": "<REDACTED>",
                          "USERS_TABLE": "Users",
                          "MEETUPS_TABLE": "Meetups"
                        }
                      },
                      "Role": {
                        "Fn::GetAtt": [
                          "IamRoleLambdaExecution",
                          "Arn"
                        ]
                      }
                    },
                    "DependsOn": [
                      "LoginLogGroup"
                    ]
                  },
                  "GetAllMeetupsLambdaVersionQCFFzyT14l7V18zqj2egT8KiBjmg4xxNKkCVetBxQ": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetAllMeetupsLambdaFunction"
                      },
                      "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
                    }
                  },
                  "GetMeetupByIdLambdaVersionO3VRSRyBdrpZQZa9mWyDgc3reUk3bwiEnCUDphfeZk": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetMeetupByIdLambdaFunction"
                      },
                      "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
                    }
                  },
                  "CreateMeetupLambdaVersionyv09poIuPoCsGOZGLIC4pnXZntaD7GR7AIfkOr0WvI": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CreateMeetupLambdaFunction"
                      },
                      "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
                    }
                  },
                  "AttendMeetupLambdaVersiongW0TsbTyk5uFTMaUDl3x0ietDr1RcRm9bxmJA6Y": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "AttendMeetupLambdaFunction"
                      },
                      "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
                    }
                  },
                  "CancelAttendanceLambdaVersionPfpxBe59L9dRE00bsl2yoEfsWZUE8I3GPDB533szU0": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "CancelAttendanceLambdaFunction"
                      },
                      "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
                    }
                  },
                  "GetUserMeetupsLambdaVersionybsfeHVIk5Fi3icczdAserol7kULN6TM5LSTcrFuhmY": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "GetUserMeetupsLambdaFunction"
                      },
                      "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
                    }
                  },
                  "RegisterLambdaVersiondWLDrfGgVnuObxQFmdxJG8pMFqSczlRthcTksB3F0Yo": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "RegisterLambdaFunction"
                      },
                      "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
                    }
                  },
                  "LoginLambdaVersioneJ3T3aA57itLss3KluCx4dVAosp0RrWEoA611BRU": {
                    "Type": "AWS::Lambda::Version",
                    "DeletionPolicy": "Retain",
                    "Properties": {
                      "FunctionName": {
                        "Ref": "LoginLambdaFunction"
                      },
                      "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
                    }
                  },
                  "ApiGatewayRestApi": {
                    "Type": "AWS::ApiGateway::RestApi",
                    "Properties": {
                      "Name": "dev-meetup-backend",
                      "EndpointConfiguration": {
                        "Types": [
                          "EDGE"
                        ]
                      },
                      "Policy": ""
                    }
                  },
                  "ApiGatewayResourceMeetups": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "meetups",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMeetupsIdVar": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMeetups"
                      },
                      "PathPart": "{id}",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMeetupsIdVarAttend": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMeetupsIdVar"
                      },
                      "PathPart": "attend",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceMeetupsIdVarCancel": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceMeetupsIdVar"
                      },
                      "PathPart": "cancel",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUser": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "user",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceUserMeetups": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceUser"
                      },
                      "PathPart": "meetups",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceAuth": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Fn::GetAtt": [
                          "ApiGatewayRestApi",
                          "RootResourceId"
                        ]
                      },
                      "PathPart": "auth",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceAuthRegister": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceAuth"
                      },
                      "PathPart": "register",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayResourceAuthLogin": {
                    "Type": "AWS::ApiGateway::Resource",
                    "Properties": {
                      "ParentId": {
                        "Ref": "ApiGatewayResourceAuth"
                      },
                      "PathPart": "login",
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      }
                    }
                  },
                  "ApiGatewayMethodMeetupsGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMeetups"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetAllMeetupsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetAllMeetupsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMeetupsIdVarGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMeetupsIdVar"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetMeetupByIdLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetMeetupByIdLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMeetupsPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMeetups"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CreateMeetupLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CreateMeetupLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMeetupsIdVarAttendPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMeetupsIdVarAttend"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "AttendMeetupLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "AttendMeetupLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodMeetupsIdVarCancelPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceMeetupsIdVarCancel"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "CancelAttendanceLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "CancelAttendanceLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodUserMeetupsGet": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "GET",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceUserMeetups"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "AWS_IAM",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "GetUserMeetupsLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "GetUserMeetupsLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodAuthRegisterPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthRegister"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "RegisterLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "RegisterLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayMethodAuthLoginPost": {
                    "Type": "AWS::ApiGateway::Method",
                    "Properties": {
                      "HttpMethod": "POST",
                      "RequestParameters": {},
                      "ResourceId": {
                        "Ref": "ApiGatewayResourceAuthLogin"
                      },
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "ApiKeyRequired": "<REDACTED>",
                      "AuthorizationType": "NONE",
                      "Integration": {
                        "IntegrationHttpMethod": "POST",
                        "Type": "AWS_PROXY",
                        "Uri": {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":apigateway:",
                              {
                                "Ref": "AWS::Region"
                              },
                              ":lambda:path/2015-03-31/functions/",
                              {
                                "Fn::GetAtt": [
                                  "LoginLambdaFunction",
                                  "Arn"
                                ]
                              },
                              "/invocations"
                            ]
                          ]
                        }
                      },
                      "MethodResponses": []
                    },
                    "DependsOn": [
                      "LoginLambdaPermissionApiGateway"
                    ]
                  },
                  "ApiGatewayDeployment1730281981576": {
                    "Type": "AWS::ApiGateway::Deployment",
                    "Properties": {
                      "RestApiId": {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "StageName": "dev"
                    },
                    "DependsOn": [
                      "ApiGatewayMethodMeetupsGet",
                      "ApiGatewayMethodMeetupsIdVarGet",
                      "ApiGatewayMethodMeetupsPost",
                      "ApiGatewayMethodMeetupsIdVarAttendPost",
                      "ApiGatewayMethodMeetupsIdVarCancelPost",
                      "ApiGatewayMethodUserMeetupsGet",
                      "ApiGatewayMethodAuthRegisterPost",
                      "ApiGatewayMethodAuthLoginPost"
                    ]
                  },
                  "GetAllMeetupsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetAllMeetupsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetMeetupByIdLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetMeetupByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CreateMeetupLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CreateMeetupLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "AttendMeetupLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "AttendMeetupLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "CancelAttendanceLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "CancelAttendanceLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "GetUserMeetupsLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "GetUserMeetupsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "RegisterLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "RegisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "LoginLambdaPermissionApiGateway": {
                    "Type": "AWS::Lambda::Permission",
                    "Properties": {
                      "FunctionName": {
                        "Fn::GetAtt": [
                          "LoginLambdaFunction",
                          "Arn"
                        ]
                      },
                      "Action": "lambda:InvokeFunction",
                      "Principal": "apigateway.amazonaws.com",
                      "SourceArn": {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":execute-api:",
                            {
                              "Ref": "AWS::Region"
                            },
                            ":",
                            {
                              "Ref": "AWS::AccountId"
                            },
                            ":",
                            {
                              "Ref": "ApiGatewayRestApi"
                            },
                            "/*/*"
                          ]
                        ]
                      }
                    }
                  },
                  "UsersTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "Users",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "email",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "email",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  },
                  "MeetupsTable": {
                    "Type": "AWS::DynamoDB::Table",
                    "Properties": {
                      "TableName": "Meetups",
                      "AttributeDefinitions": [
                        {
                          "AttributeName": "id",
                          "AttributeType": "S"
                        }
                      ],
                      "KeySchema": [
                        {
                          "AttributeName": "id",
                          "KeyType": "HASH"
                        }
                      ],
                      "BillingMode": "PAY_PER_REQUEST"
                    }
                  }
                },
                "Outputs": {
                  "ServerlessDeploymentBucketName": {
                    "Value": "meetup-app-dev-project",
                    "Export": {
                      "Name": "sls-meetup-backend-dev-ServerlessDeploymentBucketName"
                    }
                  },
                  "GetAllMeetupsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetAllMeetupsLambdaVersionQCFFzyT14l7V18zqj2egT8KiBjmg4xxNKkCVetBxQ"
                    },
                    "Export": {
                      "Name": "sls-meetup-backend-dev-GetAllMeetupsLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetMeetupByIdLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetMeetupByIdLambdaVersionO3VRSRyBdrpZQZa9mWyDgc3reUk3bwiEnCUDphfeZk"
                    },
                    "Export": {
                      "Name": "sls-meetup-backend-dev-GetMeetupByIdLambdaFunctionQualifiedArn"
                    }
                  },
                  "CreateMeetupLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CreateMeetupLambdaVersionyv09poIuPoCsGOZGLIC4pnXZntaD7GR7AIfkOr0WvI"
                    },
                    "Export": {
                      "Name": "sls-meetup-backend-dev-CreateMeetupLambdaFunctionQualifiedArn"
                    }
                  },
                  "AttendMeetupLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "AttendMeetupLambdaVersiongW0TsbTyk5uFTMaUDl3x0ietDr1RcRm9bxmJA6Y"
                    },
                    "Export": {
                      "Name": "sls-meetup-backend-dev-AttendMeetupLambdaFunctionQualifiedArn"
                    }
                  },
                  "CancelAttendanceLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "CancelAttendanceLambdaVersionPfpxBe59L9dRE00bsl2yoEfsWZUE8I3GPDB533szU0"
                    },
                    "Export": {
                      "Name": "sls-meetup-backend-dev-CancelAttendanceLambdaFunctionQualifiedArn"
                    }
                  },
                  "GetUserMeetupsLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "GetUserMeetupsLambdaVersionybsfeHVIk5Fi3icczdAserol7kULN6TM5LSTcrFuhmY"
                    },
                    "Export": {
                      "Name": "sls-meetup-backend-dev-GetUserMeetupsLambdaFunctionQualifiedArn"
                    }
                  },
                  "RegisterLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "RegisterLambdaVersiondWLDrfGgVnuObxQFmdxJG8pMFqSczlRthcTksB3F0Yo"
                    },
                    "Export": {
                      "Name": "sls-meetup-backend-dev-RegisterLambdaFunctionQualifiedArn"
                    }
                  },
                  "LoginLambdaFunctionQualifiedArn": {
                    "Description": "Current Lambda function version",
                    "Value": {
                      "Ref": "LoginLambdaVersioneJ3T3aA57itLss3KluCx4dVAosp0RrWEoA611BRU"
                    },
                    "Export": {
                      "Name": "sls-meetup-backend-dev-LoginLambdaFunctionQualifiedArn"
                    }
                  },
                  "ServiceEndpoint": {
                    "Description": "URL of the service endpoint",
                    "Value": {
                      "Fn::Join": [
                        "",
                        [
                          "https://",
                          {
                            "Ref": "ApiGatewayRestApi"
                          },
                          ".execute-api.",
                          {
                            "Ref": "AWS::Region"
                          },
                          ".",
                          {
                            "Ref": "AWS::URLSuffix"
                          },
                          "/dev"
                        ]
                      ]
                    },
                    "Export": {
                      "Name": "sls-meetup-backend-dev-ServiceEndpoint"
                    }
                  }
                }
              },
              "vpc": {}
            },
            "functions": {
              "getAllMeetups": {
                "handler": "handler.getAllMeetups",
                "events": [
                  {
                    "http": {
                      "path": "meetups",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "meetup-backend-dev-getAllMeetups",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetAllMeetupsLambdaVersionQCFFzyT14l7V18zqj2egT8KiBjmg4xxNKkCVetBxQ"
              },
              "getMeetupById": {
                "handler": "handler.getMeetupById",
                "events": [
                  {
                    "http": {
                      "path": "meetups/{id}",
                      "method": "get",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "meetup-backend-dev-getMeetupById",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetMeetupByIdLambdaVersionO3VRSRyBdrpZQZa9mWyDgc3reUk3bwiEnCUDphfeZk"
              },
              "createMeetup": {
                "handler": "handler.createMeetup",
                "events": [
                  {
                    "http": {
                      "path": "meetups",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "meetup-backend-dev-createMeetup",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CreateMeetupLambdaVersionyv09poIuPoCsGOZGLIC4pnXZntaD7GR7AIfkOr0WvI"
              },
              "attendMeetup": {
                "handler": "handler.attendMeetup",
                "events": [
                  {
                    "http": {
                      "path": "meetups/{id}/attend",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "meetup-backend-dev-attendMeetup",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "AttendMeetupLambdaVersiongW0TsbTyk5uFTMaUDl3x0ietDr1RcRm9bxmJA6Y"
              },
              "cancelAttendance": {
                "handler": "handler.cancelAttendance",
                "events": [
                  {
                    "http": {
                      "path": "meetups/{id}/cancel",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "meetup-backend-dev-cancelAttendance",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "CancelAttendanceLambdaVersionPfpxBe59L9dRE00bsl2yoEfsWZUE8I3GPDB533szU0"
              },
              "getUserMeetups": {
                "handler": "handler.getUserMeetups",
                "events": [
                  {
                    "http": {
                      "path": "user/meetups",
                      "method": "get",
                      "authorizer": {
                        "type": "AWS_IAM",
                        "managedExternally": false,
                        "identitySource": "method.request.header.Authorization"
                      },
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "meetup-backend-dev-getUserMeetups",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "GetUserMeetupsLambdaVersionybsfeHVIk5Fi3icczdAserol7kULN6TM5LSTcrFuhmY"
              },
              "register": {
                "handler": "authController.register",
                "events": [
                  {
                    "http": {
                      "path": "auth/register",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "meetup-backend-dev-register",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "RegisterLambdaVersiondWLDrfGgVnuObxQFmdxJG8pMFqSczlRthcTksB3F0Yo"
              },
              "login": {
                "handler": "authController.login",
                "events": [
                  {
                    "http": {
                      "path": "auth/login",
                      "method": "post",
                      "integration": "AWS_PROXY"
                    }
                  }
                ],
                "name": "meetup-backend-dev-login",
                "package": {},
                "memory": 1024,
                "timeout": 6,
                "runtime": "nodejs18.x",
                "vpc": {},
                "versionLogicalId": "LoginLambdaVersioneJ3T3aA57itLss3KluCx4dVAosp0RrWEoA611BRU"
              }
            },
            "resources": {
              "Resources": {
                "UsersTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "Users",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "email",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "email",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                },
                "MeetupsTable": {
                  "Type": "AWS::DynamoDB::Table",
                  "Properties": {
                    "TableName": "Meetups",
                    "AttributeDefinitions": [
                      {
                        "AttributeName": "id",
                        "AttributeType": "S"
                      }
                    ],
                    "KeySchema": [
                      {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                      }
                    ],
                    "BillingMode": "PAY_PER_REQUEST"
                  }
                }
              },
              "Outputs": {}
            }
          },
          "configFileDirPath": "C:\\Users\\julia\\OneDrive\\Dokument\\JSD-23\\meetup-app\\backend",
          "config": {
            "type": "env"
          },
          "options": {},
          "stage": "dev",
          "dashboard": null,
          "logger": {
            "namespace": "s:core:resolver:env",
            "prefix": null,
            "prefixColor": null
          },
          "_credentialsPromise": "<REDACTED>"
        },
        "resolvers": {}
      }
    },
    "composeServiceName": null,
    "servicePath": "C:\\Users\\julia\\OneDrive\\Dokument\\JSD-23\\meetup-app\\backend",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "service": "meetup-backend",
      "provider": {
        "name": "aws",
        "runtime": "nodejs18.x",
        "region": "eu-north-1",
        "stage": "dev",
        "environment": {
          "JWT_SECRET": "<REDACTED>",
          "USERS_TABLE": "Users",
          "MEETUPS_TABLE": "Meetups"
        },
        "deploymentBucket": "meetup-app-dev-project",
        "versionFunctions": true,
        "deploymentBucketObject": {
          "name": "meetup-app-dev-project"
        },
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "GetAllMeetupsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/meetup-backend-dev-getAllMeetups"
              }
            },
            "GetMeetupByIdLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/meetup-backend-dev-getMeetupById"
              }
            },
            "CreateMeetupLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/meetup-backend-dev-createMeetup"
              }
            },
            "AttendMeetupLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/meetup-backend-dev-attendMeetup"
              }
            },
            "CancelAttendanceLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/meetup-backend-dev-cancelAttendance"
              }
            },
            "GetUserMeetupsLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/meetup-backend-dev-getUserMeetups"
              }
            },
            "RegisterLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/meetup-backend-dev-register"
              }
            },
            "LoginLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/meetup-backend-dev-login"
              }
            },
            "IamRoleLambdaExecution": {
              "Type": "AWS::IAM::Role",
              "Properties": {
                "AssumeRolePolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Principal": {
                        "Service": [
                          "lambda.amazonaws.com"
                        ]
                      },
                      "Action": [
                        "sts:AssumeRole"
                      ]
                    }
                  ]
                },
                "Policies": [
                  {
                    "PolicyName": {
                      "Fn::Join": [
                        "-",
                        [
                          "meetup-backend",
                          "dev",
                          "lambda"
                        ]
                      ]
                    },
                    "PolicyDocument": {
                      "Version": "2012-10-17",
                      "Statement": [
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup",
                            "logs:TagResource"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/meetup-backend-dev*:*"
                            }
                          ]
                        },
                        {
                          "Effect": "Allow",
                          "Action": [
                            "logs:PutLogEvents"
                          ],
                          "Resource": [
                            {
                              "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/meetup-backend-dev*:*:*"
                            }
                          ]
                        }
                      ]
                    }
                  }
                ],
                "Path": "/",
                "RoleName": {
                  "Fn::Join": [
                    "-",
                    [
                      "meetup-backend",
                      "dev",
                      {
                        "Ref": "AWS::Region"
                      },
                      "lambdaRole"
                    ]
                  ]
                }
              }
            },
            "GetAllMeetupsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "meetup-app-dev-project",
                  "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                },
                "Handler": "handler.getAllMeetups",
                "Runtime": "nodejs18.x",
                "FunctionName": "meetup-backend-dev-getAllMeetups",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "JWT_SECRET": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEETUPS_TABLE": "Meetups"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetAllMeetupsLogGroup"
              ]
            },
            "GetMeetupByIdLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "meetup-app-dev-project",
                  "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                },
                "Handler": "handler.getMeetupById",
                "Runtime": "nodejs18.x",
                "FunctionName": "meetup-backend-dev-getMeetupById",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "JWT_SECRET": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEETUPS_TABLE": "Meetups"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetMeetupByIdLogGroup"
              ]
            },
            "CreateMeetupLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "meetup-app-dev-project",
                  "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                },
                "Handler": "handler.createMeetup",
                "Runtime": "nodejs18.x",
                "FunctionName": "meetup-backend-dev-createMeetup",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "JWT_SECRET": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEETUPS_TABLE": "Meetups"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CreateMeetupLogGroup"
              ]
            },
            "AttendMeetupLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "meetup-app-dev-project",
                  "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                },
                "Handler": "handler.attendMeetup",
                "Runtime": "nodejs18.x",
                "FunctionName": "meetup-backend-dev-attendMeetup",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "JWT_SECRET": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEETUPS_TABLE": "Meetups"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "AttendMeetupLogGroup"
              ]
            },
            "CancelAttendanceLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "meetup-app-dev-project",
                  "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                },
                "Handler": "handler.cancelAttendance",
                "Runtime": "nodejs18.x",
                "FunctionName": "meetup-backend-dev-cancelAttendance",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "JWT_SECRET": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEETUPS_TABLE": "Meetups"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "CancelAttendanceLogGroup"
              ]
            },
            "GetUserMeetupsLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "meetup-app-dev-project",
                  "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                },
                "Handler": "handler.getUserMeetups",
                "Runtime": "nodejs18.x",
                "FunctionName": "meetup-backend-dev-getUserMeetups",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "JWT_SECRET": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEETUPS_TABLE": "Meetups"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "GetUserMeetupsLogGroup"
              ]
            },
            "RegisterLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "meetup-app-dev-project",
                  "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                },
                "Handler": "authController.register",
                "Runtime": "nodejs18.x",
                "FunctionName": "meetup-backend-dev-register",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "JWT_SECRET": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEETUPS_TABLE": "Meetups"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "RegisterLogGroup"
              ]
            },
            "LoginLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": "meetup-app-dev-project",
                  "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
                },
                "Handler": "authController.login",
                "Runtime": "nodejs18.x",
                "FunctionName": "meetup-backend-dev-login",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "JWT_SECRET": "<REDACTED>",
                    "USERS_TABLE": "Users",
                    "MEETUPS_TABLE": "Meetups"
                  }
                },
                "Role": {
                  "Fn::GetAtt": [
                    "IamRoleLambdaExecution",
                    "Arn"
                  ]
                }
              },
              "DependsOn": [
                "LoginLogGroup"
              ]
            },
            "GetAllMeetupsLambdaVersionQCFFzyT14l7V18zqj2egT8KiBjmg4xxNKkCVetBxQ": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetAllMeetupsLambdaFunction"
                },
                "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
              }
            },
            "GetMeetupByIdLambdaVersionO3VRSRyBdrpZQZa9mWyDgc3reUk3bwiEnCUDphfeZk": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetMeetupByIdLambdaFunction"
                },
                "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
              }
            },
            "CreateMeetupLambdaVersionyv09poIuPoCsGOZGLIC4pnXZntaD7GR7AIfkOr0WvI": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CreateMeetupLambdaFunction"
                },
                "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
              }
            },
            "AttendMeetupLambdaVersiongW0TsbTyk5uFTMaUDl3x0ietDr1RcRm9bxmJA6Y": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AttendMeetupLambdaFunction"
                },
                "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
              }
            },
            "CancelAttendanceLambdaVersionPfpxBe59L9dRE00bsl2yoEfsWZUE8I3GPDB533szU0": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "CancelAttendanceLambdaFunction"
                },
                "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
              }
            },
            "GetUserMeetupsLambdaVersionybsfeHVIk5Fi3icczdAserol7kULN6TM5LSTcrFuhmY": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "GetUserMeetupsLambdaFunction"
                },
                "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
              }
            },
            "RegisterLambdaVersiondWLDrfGgVnuObxQFmdxJG8pMFqSczlRthcTksB3F0Yo": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "RegisterLambdaFunction"
                },
                "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
              }
            },
            "LoginLambdaVersioneJ3T3aA57itLss3KluCx4dVAosp0RrWEoA611BRU": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "LoginLambdaFunction"
                },
                "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-meetup-backend",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceMeetups": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "meetups",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMeetupsIdVar": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMeetups"
                },
                "PathPart": "{id}",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMeetupsIdVarAttend": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMeetupsIdVar"
                },
                "PathPart": "attend",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceMeetupsIdVarCancel": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceMeetupsIdVar"
                },
                "PathPart": "cancel",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUser": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "user",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceUserMeetups": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceUser"
                },
                "PathPart": "meetups",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuth": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "auth",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuthRegister": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAuth"
                },
                "PathPart": "register",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayResourceAuthLogin": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Ref": "ApiGatewayResourceAuth"
                },
                "PathPart": "login",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodMeetupsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMeetups"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetAllMeetupsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetAllMeetupsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMeetupsIdVarGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMeetupsIdVar"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetMeetupByIdLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetMeetupByIdLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMeetupsPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMeetups"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CreateMeetupLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CreateMeetupLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMeetupsIdVarAttendPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMeetupsIdVarAttend"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AttendMeetupLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AttendMeetupLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodMeetupsIdVarCancelPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceMeetupsIdVarCancel"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "CancelAttendanceLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "CancelAttendanceLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodUserMeetupsGet": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "GET",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceUserMeetups"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "AWS_IAM",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "GetUserMeetupsLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "GetUserMeetupsLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAuthRegisterPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthRegister"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "RegisterLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "RegisterLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayMethodAuthLoginPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceAuthLogin"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "LoginLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "LoginLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1730281981576": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodMeetupsGet",
                "ApiGatewayMethodMeetupsIdVarGet",
                "ApiGatewayMethodMeetupsPost",
                "ApiGatewayMethodMeetupsIdVarAttendPost",
                "ApiGatewayMethodMeetupsIdVarCancelPost",
                "ApiGatewayMethodUserMeetupsGet",
                "ApiGatewayMethodAuthRegisterPost",
                "ApiGatewayMethodAuthLoginPost"
              ]
            },
            "GetAllMeetupsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetAllMeetupsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetMeetupByIdLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetMeetupByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CreateMeetupLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CreateMeetupLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "AttendMeetupLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AttendMeetupLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "CancelAttendanceLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "CancelAttendanceLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "GetUserMeetupsLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "GetUserMeetupsLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "RegisterLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "RegisterLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "LoginLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            },
            "UsersTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Users",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "email",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "email",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            },
            "MeetupsTable": {
              "Type": "AWS::DynamoDB::Table",
              "Properties": {
                "TableName": "Meetups",
                "AttributeDefinitions": [
                  {
                    "AttributeName": "id",
                    "AttributeType": "S"
                  }
                ],
                "KeySchema": [
                  {
                    "AttributeName": "id",
                    "KeyType": "HASH"
                  }
                ],
                "BillingMode": "PAY_PER_REQUEST"
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": "meetup-app-dev-project",
              "Export": {
                "Name": "sls-meetup-backend-dev-ServerlessDeploymentBucketName"
              }
            },
            "GetAllMeetupsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetAllMeetupsLambdaVersionQCFFzyT14l7V18zqj2egT8KiBjmg4xxNKkCVetBxQ"
              },
              "Export": {
                "Name": "sls-meetup-backend-dev-GetAllMeetupsLambdaFunctionQualifiedArn"
              }
            },
            "GetMeetupByIdLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetMeetupByIdLambdaVersionO3VRSRyBdrpZQZa9mWyDgc3reUk3bwiEnCUDphfeZk"
              },
              "Export": {
                "Name": "sls-meetup-backend-dev-GetMeetupByIdLambdaFunctionQualifiedArn"
              }
            },
            "CreateMeetupLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CreateMeetupLambdaVersionyv09poIuPoCsGOZGLIC4pnXZntaD7GR7AIfkOr0WvI"
              },
              "Export": {
                "Name": "sls-meetup-backend-dev-CreateMeetupLambdaFunctionQualifiedArn"
              }
            },
            "AttendMeetupLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AttendMeetupLambdaVersiongW0TsbTyk5uFTMaUDl3x0ietDr1RcRm9bxmJA6Y"
              },
              "Export": {
                "Name": "sls-meetup-backend-dev-AttendMeetupLambdaFunctionQualifiedArn"
              }
            },
            "CancelAttendanceLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "CancelAttendanceLambdaVersionPfpxBe59L9dRE00bsl2yoEfsWZUE8I3GPDB533szU0"
              },
              "Export": {
                "Name": "sls-meetup-backend-dev-CancelAttendanceLambdaFunctionQualifiedArn"
              }
            },
            "GetUserMeetupsLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "GetUserMeetupsLambdaVersionybsfeHVIk5Fi3icczdAserol7kULN6TM5LSTcrFuhmY"
              },
              "Export": {
                "Name": "sls-meetup-backend-dev-GetUserMeetupsLambdaFunctionQualifiedArn"
              }
            },
            "RegisterLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "RegisterLambdaVersiondWLDrfGgVnuObxQFmdxJG8pMFqSczlRthcTksB3F0Yo"
              },
              "Export": {
                "Name": "sls-meetup-backend-dev-RegisterLambdaFunctionQualifiedArn"
              }
            },
            "LoginLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "LoginLambdaVersioneJ3T3aA57itLss3KluCx4dVAosp0RrWEoA611BRU"
              },
              "Export": {
                "Name": "sls-meetup-backend-dev-LoginLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-meetup-backend-dev-ServiceEndpoint"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "getAllMeetups": {
          "handler": "handler.getAllMeetups",
          "events": [
            {
              "http": {
                "path": "meetups",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "meetup-backend-dev-getAllMeetups",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetAllMeetupsLambdaVersionQCFFzyT14l7V18zqj2egT8KiBjmg4xxNKkCVetBxQ"
        },
        "getMeetupById": {
          "handler": "handler.getMeetupById",
          "events": [
            {
              "http": {
                "path": "meetups/{id}",
                "method": "get",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "meetup-backend-dev-getMeetupById",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetMeetupByIdLambdaVersionO3VRSRyBdrpZQZa9mWyDgc3reUk3bwiEnCUDphfeZk"
        },
        "createMeetup": {
          "handler": "handler.createMeetup",
          "events": [
            {
              "http": {
                "path": "meetups",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "meetup-backend-dev-createMeetup",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CreateMeetupLambdaVersionyv09poIuPoCsGOZGLIC4pnXZntaD7GR7AIfkOr0WvI"
        },
        "attendMeetup": {
          "handler": "handler.attendMeetup",
          "events": [
            {
              "http": {
                "path": "meetups/{id}/attend",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "meetup-backend-dev-attendMeetup",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "AttendMeetupLambdaVersiongW0TsbTyk5uFTMaUDl3x0ietDr1RcRm9bxmJA6Y"
        },
        "cancelAttendance": {
          "handler": "handler.cancelAttendance",
          "events": [
            {
              "http": {
                "path": "meetups/{id}/cancel",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "meetup-backend-dev-cancelAttendance",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "CancelAttendanceLambdaVersionPfpxBe59L9dRE00bsl2yoEfsWZUE8I3GPDB533szU0"
        },
        "getUserMeetups": {
          "handler": "handler.getUserMeetups",
          "events": [
            {
              "http": {
                "path": "user/meetups",
                "method": "get",
                "authorizer": {
                  "type": "AWS_IAM",
                  "managedExternally": false,
                  "identitySource": "method.request.header.Authorization"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "meetup-backend-dev-getUserMeetups",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "GetUserMeetupsLambdaVersionybsfeHVIk5Fi3icczdAserol7kULN6TM5LSTcrFuhmY"
        },
        "register": {
          "handler": "authController.register",
          "events": [
            {
              "http": {
                "path": "auth/register",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "meetup-backend-dev-register",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "RegisterLambdaVersiondWLDrfGgVnuObxQFmdxJG8pMFqSczlRthcTksB3F0Yo"
        },
        "login": {
          "handler": "authController.login",
          "events": [
            {
              "http": {
                "path": "auth/login",
                "method": "post",
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "meetup-backend-dev-login",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs18.x",
          "vpc": {},
          "versionLogicalId": "LoginLambdaVersioneJ3T3aA57itLss3KluCx4dVAosp0RrWEoA611BRU"
        }
      },
      "resources": {
        "Resources": {
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Users",
              "AttributeDefinitions": [
                {
                  "AttributeName": "email",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "email",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          },
          "MeetupsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "Meetups",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "BillingMode": "PAY_PER_REQUEST"
            }
          }
        },
        "Outputs": {}
      }
    },
    "serviceRawFile": "service: meetup-backend  # Namnet på din tjänst\r\n\r\nprovider:\r\n  name: aws\r\n  runtime: nodejs18.x  # Uppdaterat till en stödd version\r\n  region: eu-north-1\r\n  stage: dev\r\n  environment:\r\n    JWT_SECRET: ${env:JWT_SECRET}  # Hämta JWT-hemligheten från miljövariabel\r\n    USERS_TABLE: Users  # DynamoDB-tabellnamn för användare\r\n    MEETUPS_TABLE: Meetups  # DynamoDB-tabellnamn för meetups\r\n  deploymentBucket:\r\n    name: meetup-app-dev-project  # Din S3-bucket\r\n\r\nfunctions:\r\n  getAllMeetups:\r\n    handler: handler.getAllMeetups\r\n    events:\r\n      - http:\r\n          path: meetups\r\n          method: get\r\n\r\n  getMeetupById:\r\n    handler: handler.getMeetupById\r\n    events:\r\n      - http:\r\n          path: meetups/{id}\r\n          method: get\r\n\r\n  createMeetup:\r\n    handler: handler.createMeetup\r\n    events:\r\n      - http:\r\n          path: meetups\r\n          method: post\r\n\r\n  attendMeetup:\r\n    handler: handler.attendMeetup\r\n    events:\r\n      - http:\r\n          path: meetups/{id}/attend\r\n          method: post\r\n\r\n  cancelAttendance:\r\n    handler: handler.cancelAttendance\r\n    events:\r\n      - http:\r\n          path: meetups/{id}/cancel\r\n          method: post\r\n\r\n  getUserMeetups:\r\n    handler: handler.getUserMeetups\r\n    events:\r\n      - http:\r\n          path: user/meetups\r\n          method: get\r\n          authorizer: aws_iam\r\n\r\n  register:\r\n    handler: authController.register\r\n    events:\r\n      - http:\r\n          path: auth/register\r\n          method: post\r\n\r\n  login:\r\n    handler: authController.login\r\n    events:\r\n      - http:\r\n          path: auth/login\r\n          method: post\r\n\r\nresources:\r\n  Resources:\r\n    UsersTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: Users  # Bevara detta om du vill använda den existerande tabellen\r\n        AttributeDefinitions:\r\n          - AttributeName: email\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: email\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n\r\n    MeetupsTable:\r\n      Type: AWS::DynamoDB::Table\r\n      Properties:\r\n        TableName: Meetups\r\n        AttributeDefinitions:\r\n          - AttributeName: id\r\n            AttributeType: S\r\n        KeySchema:\r\n          - AttributeName: id\r\n            KeyType: HASH\r\n        BillingMode: PAY_PER_REQUEST\r\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "7986381cd3652cabc2e4485a60b6b402",
    "stage": "dev",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "14ccab71-a159-447b-8e64-798682be527e",
    "orgName": "juliawikdahl",
    "userId": "QbFzk0xMPPHvYL4MHk",
    "dashboard": {
      "isEnabledForService": false,
      "requiredAuthentication": false,
      "orgFeaturesInUse": null,
      "orgObservabilityIntegrations": null,
      "serviceAppId": null,
      "serviceProvider": null,
      "instanceParameters": null
    },
    "userName": "juliawikdahl",
    "subscription": null,
    "userEmail": "yhjs23.wikdju@folkuniversitetet.nu",
    "serviceProviderAwsRegion": "eu-north-1",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "820242928571",
    "projectType": "traditional",
    "versionSf": "4.4.7",
    "serviceProviderAwsCfStackName": "meetup-backend-dev",
    "integrations": {},
    "serviceUniqueId": "arn:aws:cloudformation:eu-north-1:820242928571:stack/meetup-backend-dev/ca001260-96a4-11ef-ae52-0a0f5a3e1f2d",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:eu-north-1:820242928571:stack/meetup-backend-dev/ca001260-96a4-11ef-ae52-0a0f5a3e1f2d",
    "serviceProviderAwsCfStackCreated": "2024-10-30T09:53:18.063Z",
    "serviceProviderAwsCfStackUpdated": null,
    "serviceProviderAwsCfStackStatus": "CREATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "GetUserMeetupsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:820242928571:function:meetup-backend-dev-getUserMeetups:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-meetup-backend-dev-GetUserMeetupsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetAllMeetupsLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:820242928571:function:meetup-backend-dev-getAllMeetups:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-meetup-backend-dev-GetAllMeetupsLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "AttendMeetupLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:820242928571:function:meetup-backend-dev-attendMeetup:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-meetup-backend-dev-AttendMeetupLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "GetMeetupByIdLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:820242928571:function:meetup-backend-dev-getMeetupById:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-meetup-backend-dev-GetMeetupByIdLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "RegisterLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:820242928571:function:meetup-backend-dev-register:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-meetup-backend-dev-RegisterLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CancelAttendanceLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:820242928571:function:meetup-backend-dev-cancelAttendance:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-meetup-backend-dev-CancelAttendanceLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "CreateMeetupLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:820242928571:function:meetup-backend-dev-createMeetup:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-meetup-backend-dev-CreateMeetupLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "LoginLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:eu-north-1:820242928571:function:meetup-backend-dev-login:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-meetup-backend-dev-LoginLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://n665nc9gi0.execute-api.eu-north-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-meetup-backend-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "meetup-app-dev-project",
        "ExportName": "sls-meetup-backend-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}