{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "GetAllMeetupsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/meetup-backend-dev-getAllMeetups"
      }
    },
    "GetMeetupByIdLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/meetup-backend-dev-getMeetupById"
      }
    },
    "CreateMeetupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/meetup-backend-dev-createMeetup"
      }
    },
    "AttendMeetupLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/meetup-backend-dev-attendMeetup"
      }
    },
    "CancelAttendanceLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/meetup-backend-dev-cancelAttendance"
      }
    },
    "GetUserMeetupsLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/meetup-backend-dev-getUserMeetups"
      }
    },
    "RegisterLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/meetup-backend-dev-register"
      }
    },
    "LoginLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/meetup-backend-dev-login"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "meetup-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/meetup-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/meetup-backend-dev*:*:*"
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "meetup-backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GetAllMeetupsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "meetup-app-dev-project",
          "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
        },
        "Handler": "handler.getAllMeetups",
        "Runtime": "nodejs18.x",
        "FunctionName": "meetup-backend-dev-getAllMeetups",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "JWT_SECRET": "mysecretkey123",
            "USERS_TABLE": "Users",
            "MEETUPS_TABLE": "Meetups"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetAllMeetupsLogGroup"
      ]
    },
    "GetMeetupByIdLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "meetup-app-dev-project",
          "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
        },
        "Handler": "handler.getMeetupById",
        "Runtime": "nodejs18.x",
        "FunctionName": "meetup-backend-dev-getMeetupById",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "JWT_SECRET": "mysecretkey123",
            "USERS_TABLE": "Users",
            "MEETUPS_TABLE": "Meetups"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetMeetupByIdLogGroup"
      ]
    },
    "CreateMeetupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "meetup-app-dev-project",
          "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
        },
        "Handler": "handler.createMeetup",
        "Runtime": "nodejs18.x",
        "FunctionName": "meetup-backend-dev-createMeetup",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "JWT_SECRET": "mysecretkey123",
            "USERS_TABLE": "Users",
            "MEETUPS_TABLE": "Meetups"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateMeetupLogGroup"
      ]
    },
    "AttendMeetupLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "meetup-app-dev-project",
          "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
        },
        "Handler": "handler.attendMeetup",
        "Runtime": "nodejs18.x",
        "FunctionName": "meetup-backend-dev-attendMeetup",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "JWT_SECRET": "mysecretkey123",
            "USERS_TABLE": "Users",
            "MEETUPS_TABLE": "Meetups"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AttendMeetupLogGroup"
      ]
    },
    "CancelAttendanceLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "meetup-app-dev-project",
          "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
        },
        "Handler": "handler.cancelAttendance",
        "Runtime": "nodejs18.x",
        "FunctionName": "meetup-backend-dev-cancelAttendance",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "JWT_SECRET": "mysecretkey123",
            "USERS_TABLE": "Users",
            "MEETUPS_TABLE": "Meetups"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CancelAttendanceLogGroup"
      ]
    },
    "GetUserMeetupsLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "meetup-app-dev-project",
          "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
        },
        "Handler": "handler.getUserMeetups",
        "Runtime": "nodejs18.x",
        "FunctionName": "meetup-backend-dev-getUserMeetups",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "JWT_SECRET": "mysecretkey123",
            "USERS_TABLE": "Users",
            "MEETUPS_TABLE": "Meetups"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUserMeetupsLogGroup"
      ]
    },
    "RegisterLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "meetup-app-dev-project",
          "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
        },
        "Handler": "authController.register",
        "Runtime": "nodejs18.x",
        "FunctionName": "meetup-backend-dev-register",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "JWT_SECRET": "mysecretkey123",
            "USERS_TABLE": "Users",
            "MEETUPS_TABLE": "Meetups"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "RegisterLogGroup"
      ]
    },
    "LoginLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "meetup-app-dev-project",
          "S3Key": "serverless/meetup-backend/dev/1730281992504-2024-10-30T09:53:12.504Z/meetup-backend.zip"
        },
        "Handler": "authController.login",
        "Runtime": "nodejs18.x",
        "FunctionName": "meetup-backend-dev-login",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "JWT_SECRET": "mysecretkey123",
            "USERS_TABLE": "Users",
            "MEETUPS_TABLE": "Meetups"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "LoginLogGroup"
      ]
    },
    "GetAllMeetupsLambdaVersionQCFFzyT14l7V18zqj2egT8KiBjmg4xxNKkCVetBxQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetAllMeetupsLambdaFunction"
        },
        "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
      }
    },
    "GetMeetupByIdLambdaVersionO3VRSRyBdrpZQZa9mWyDgc3reUk3bwiEnCUDphfeZk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetMeetupByIdLambdaFunction"
        },
        "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
      }
    },
    "CreateMeetupLambdaVersionyv09poIuPoCsGOZGLIC4pnXZntaD7GR7AIfkOr0WvI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateMeetupLambdaFunction"
        },
        "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
      }
    },
    "AttendMeetupLambdaVersiongW0TsbTyk5uFTMaUDl3x0ietDr1RcRm9bxmJA6Y": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AttendMeetupLambdaFunction"
        },
        "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
      }
    },
    "CancelAttendanceLambdaVersionPfpxBe59L9dRE00bsl2yoEfsWZUE8I3GPDB533szU0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CancelAttendanceLambdaFunction"
        },
        "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
      }
    },
    "GetUserMeetupsLambdaVersionybsfeHVIk5Fi3icczdAserol7kULN6TM5LSTcrFuhmY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserMeetupsLambdaFunction"
        },
        "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
      }
    },
    "RegisterLambdaVersiondWLDrfGgVnuObxQFmdxJG8pMFqSczlRthcTksB3F0Yo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "RegisterLambdaFunction"
        },
        "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
      }
    },
    "LoginLambdaVersioneJ3T3aA57itLss3KluCx4dVAosp0RrWEoA611BRU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "LoginLambdaFunction"
        },
        "CodeSha256": "0Kxn5voX2PRrRdXzxbM442+28YO09NMKrC3vZLUDtno="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-meetup-backend",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceMeetups": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "meetups",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMeetupsIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceMeetups"
        },
        "PathPart": "{id}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMeetupsIdVarAttend": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceMeetupsIdVar"
        },
        "PathPart": "attend",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceMeetupsIdVarCancel": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceMeetupsIdVar"
        },
        "PathPart": "cancel",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserMeetups": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "meetups",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuth": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "auth",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthRegister": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "register",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAuthLogin": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceAuth"
        },
        "PathPart": "login",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodMeetupsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMeetups"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetAllMeetupsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetAllMeetupsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMeetupsIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMeetupsIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetMeetupByIdLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetMeetupByIdLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMeetupsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMeetups"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateMeetupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateMeetupLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMeetupsIdVarAttendPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMeetupsIdVarAttend"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AttendMeetupLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AttendMeetupLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodMeetupsIdVarCancelPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceMeetupsIdVarCancel"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CancelAttendanceLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CancelAttendanceLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUserMeetupsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserMeetups"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "AWS_IAM",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserMeetupsLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetUserMeetupsLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuthRegisterPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthRegister"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "RegisterLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "RegisterLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAuthLoginPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAuthLogin"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "LoginLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "LoginLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1730281981576": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodMeetupsGet",
        "ApiGatewayMethodMeetupsIdVarGet",
        "ApiGatewayMethodMeetupsPost",
        "ApiGatewayMethodMeetupsIdVarAttendPost",
        "ApiGatewayMethodMeetupsIdVarCancelPost",
        "ApiGatewayMethodUserMeetupsGet",
        "ApiGatewayMethodAuthRegisterPost",
        "ApiGatewayMethodAuthLoginPost"
      ]
    },
    "GetAllMeetupsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetAllMeetupsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetMeetupByIdLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetMeetupByIdLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateMeetupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateMeetupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AttendMeetupLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AttendMeetupLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CancelAttendanceLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CancelAttendanceLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUserMeetupsLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserMeetupsLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "RegisterLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "RegisterLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LoginLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "LoginLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "UsersTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Users",
        "AttributeDefinitions": [
          {
            "AttributeName": "email",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "email",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "MeetupsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "Meetups",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "meetup-app-dev-project",
      "Export": {
        "Name": "sls-meetup-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "GetAllMeetupsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetAllMeetupsLambdaVersionQCFFzyT14l7V18zqj2egT8KiBjmg4xxNKkCVetBxQ"
      },
      "Export": {
        "Name": "sls-meetup-backend-dev-GetAllMeetupsLambdaFunctionQualifiedArn"
      }
    },
    "GetMeetupByIdLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetMeetupByIdLambdaVersionO3VRSRyBdrpZQZa9mWyDgc3reUk3bwiEnCUDphfeZk"
      },
      "Export": {
        "Name": "sls-meetup-backend-dev-GetMeetupByIdLambdaFunctionQualifiedArn"
      }
    },
    "CreateMeetupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateMeetupLambdaVersionyv09poIuPoCsGOZGLIC4pnXZntaD7GR7AIfkOr0WvI"
      },
      "Export": {
        "Name": "sls-meetup-backend-dev-CreateMeetupLambdaFunctionQualifiedArn"
      }
    },
    "AttendMeetupLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AttendMeetupLambdaVersiongW0TsbTyk5uFTMaUDl3x0ietDr1RcRm9bxmJA6Y"
      },
      "Export": {
        "Name": "sls-meetup-backend-dev-AttendMeetupLambdaFunctionQualifiedArn"
      }
    },
    "CancelAttendanceLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CancelAttendanceLambdaVersionPfpxBe59L9dRE00bsl2yoEfsWZUE8I3GPDB533szU0"
      },
      "Export": {
        "Name": "sls-meetup-backend-dev-CancelAttendanceLambdaFunctionQualifiedArn"
      }
    },
    "GetUserMeetupsLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserMeetupsLambdaVersionybsfeHVIk5Fi3icczdAserol7kULN6TM5LSTcrFuhmY"
      },
      "Export": {
        "Name": "sls-meetup-backend-dev-GetUserMeetupsLambdaFunctionQualifiedArn"
      }
    },
    "RegisterLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "RegisterLambdaVersiondWLDrfGgVnuObxQFmdxJG8pMFqSczlRthcTksB3F0Yo"
      },
      "Export": {
        "Name": "sls-meetup-backend-dev-RegisterLambdaFunctionQualifiedArn"
      }
    },
    "LoginLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "LoginLambdaVersioneJ3T3aA57itLss3KluCx4dVAosp0RrWEoA611BRU"
      },
      "Export": {
        "Name": "sls-meetup-backend-dev-LoginLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-meetup-backend-dev-ServiceEndpoint"
      }
    }
  }
}